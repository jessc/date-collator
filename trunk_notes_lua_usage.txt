
# Some text on how Lua interfaces with Trunk Notes


{{lua Multiply.lua, 5, 10}}
n1 = args[1]
n2 = args[2]
return n1 * n2

# some people on the internet say ... should return a table of all the arguments, something like:
return ...
# haven't figured out how to get it to work yet, though



A wiki page is a Lua table (a hash) describing the page. The following attributes are available:
contents – the actual contents of the page
arguments – the list of arguments taken from the query string


page = wiki.get(title)
string.find(page.contents, "text")
is_a_front = false
for _, tag in pairs(page.tags) do
  if tag == "Front" then
    is_a_front = true
  end
end
if is_a_front then
    _, title_end = string.find(page.contents, "#Countdown\n")
    if title_end then
      _,_,first_plot = string.find(page.contents, "(%* .*)", title_end)
      if first_plot then
        title_list = title_list .. first_plot .. " ([[" .. title .. "]])\n"
      end
    end
end




string.find() will find the first instance of its second argument in its first, returning two values - where the match starts, and where the match ends. In other words:
string.find('foobar', 'foo') -->1  3
string.find('foobar', 'bar') -->4  6
actually, it returns two values plus any captures. Because string.find() knows regular expressions ("patterns").



http://www.lua.org/pil/11.1.html







-- this code may work to send out multiple values:
--[[
--
-- Generates a list of pages that have a tag named the same as the current page.
--

returnValue = ""
titles = ""
pagesWithTag = 0

for pageIteration, currentPageTitle in ipairs(wiki.titles()) do
  
  for tagIteration, tag in ipairs(wiki.get(currentPageTitle).tags) do
  
    if (tag == page.title) then
      pagesWithTag = pagesWithTag + 1
      titles = titles .. "[[" .. currentPageTitle .. "]] "
    end
  
  end
  
end


if (pagesWithTag > 0) then
  returnValue = "###Pages With This Tag###\n " .. titles
end

return returnValue

]]







-- Tried hard to find a more elegant solution (such as setting a variable to ..., which is a table that contains all the args. Doesn't seem to work in Trunk Notes, so had to resort to the Get Stuff Done philosophy.
-- Note: This doesn't seem to work, yet, and it's unclear why not.
-- {{lua try.lua, true, 2, 100, 102}}
--[[
more_args = args[2]
num_args = args[3]
total = {more_args, num_args}
x = unpack{total}
return x
]]
--[[
more_args = args[1]
num_args = args[2]

if more_args then
  if num_args == 2 then
    extra_arg_1 = args[2]
    extra_arg_2 = args[3]
    all_args = {extra_arg_1, extra_arg_2}
  elseif num_args == 3 then
    extra_arg_1 = args[2]
    extra_arg_2 = args[3]
    all_args = {extra_arg_1, extra_arg_2, extra_arg_3}
  elseif num_args == 4 then
    extra_arg_1 = args[2]
    extra_arg_2 = args[3]
    extra_arg_3 = args[4]
    all_args = {extra_arg_1, extra_arg_2, extra_arg_3, extra_arg_4}
  end
end
return all_args
]]







